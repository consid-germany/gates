"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ssm = require("aws-cdk-lib/aws-ssm");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const ssm_parameter_reader_1 = require("./ssm-parameter-reader");
const CUSTOM_RESOURCE_TYPE = "Custom::CrossRegionStringRef";
class CrossRegionStringRef extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.stackOfConstruct = aws_cdk_lib_1.Stack.of(props.constructInOtherRegion);
        const parameterName = `/${this.cdkExportsParameterPrefix}/${this.stackOfConstruct.stackName}/${props.constructInOtherRegion.node.path.replace(/[^/\w.-]/g, "-")}/${id}`;
        new ssm.StringParameter(props.constructInOtherRegion, id, {
            parameterName,
            stringValue: props.value(props.constructInOtherRegion),
        });
        this.ssmParameterReader = new ssm_parameter_reader_1.SSMParameterReader(this, id, {
            parameterName,
            region: this.stackOfConstruct.region,
            resourceType: CUSTOM_RESOURCE_TYPE,
        });
    }
    get value() {
        return this.ssmParameterReader.value;
    }
    get cdkExportsParameterPrefix() {
        return `cdk/${this.stackOfConstruct.synthesizer.bootstrapQualifier}/exports`;
    }
}
exports.default = CrossRegionStringRef;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3MtcmVnaW9uLXN0cmluZy1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY3Jvc3MtcmVnaW9uLXN0cmluZy1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFDM0MsNkNBQW9DO0FBQ3BDLDJDQUFtRDtBQUNuRCxpRUFBNEQ7QUFFNUQsTUFBTSxvQkFBb0IsR0FBRyw4QkFBOEIsQ0FBQztBQU81RCxNQUFxQixvQkFBMkMsU0FBUSxzQkFBUztJQUk3RSxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1DO1FBQ3pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG1CQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLHlCQUF5QixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztRQUV4SyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsRUFBRTtZQUN0RCxhQUFhO1lBQ2IsV0FBVyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDO1NBQ3pELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLHlDQUFrQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDdkQsYUFBYTtZQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTTtZQUNwQyxZQUFZLEVBQUUsb0JBQW9CO1NBQ3JDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUVELElBQVkseUJBQXlCO1FBQ2pDLE9BQU8sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLGtCQUFrQixVQUFVLENBQUM7SUFDakYsQ0FBQztDQUNKO0FBN0JELHVDQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNzbSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNzbVwiO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IENvbnN0cnVjdCwgSUNvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBTU01QYXJhbWV0ZXJSZWFkZXIgfSBmcm9tIFwiLi9zc20tcGFyYW1ldGVyLXJlYWRlclwiO1xuXG5jb25zdCBDVVNUT01fUkVTT1VSQ0VfVFlQRSA9IFwiQ3VzdG9tOjpDcm9zc1JlZ2lvblN0cmluZ1JlZlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENyb3NzUmVnaW9uU3RyaW5nUmVmUHJvcHM8QyBleHRlbmRzIElDb25zdHJ1Y3Q+IHtcbiAgICBjb25zdHJ1Y3RJbk90aGVyUmVnaW9uOiBDO1xuICAgIHZhbHVlOiAoY29uc3RydWN0OiBDKSA9PiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyb3NzUmVnaW9uU3RyaW5nUmVmPEMgZXh0ZW5kcyBJQ29uc3RydWN0PiBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGFja09mQ29uc3RydWN0OiBTdGFjaztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNzbVBhcmFtZXRlclJlYWRlcjogU1NNUGFyYW1ldGVyUmVhZGVyO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENyb3NzUmVnaW9uU3RyaW5nUmVmUHJvcHM8Qz4pIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy5zdGFja09mQ29uc3RydWN0ID0gU3RhY2sub2YocHJvcHMuY29uc3RydWN0SW5PdGhlclJlZ2lvbik7XG5cbiAgICAgICAgY29uc3QgcGFyYW1ldGVyTmFtZSA9IGAvJHt0aGlzLmNka0V4cG9ydHNQYXJhbWV0ZXJQcmVmaXh9LyR7dGhpcy5zdGFja09mQ29uc3RydWN0LnN0YWNrTmFtZX0vJHtwcm9wcy5jb25zdHJ1Y3RJbk90aGVyUmVnaW9uLm5vZGUucGF0aC5yZXBsYWNlKC9bXi9cXHcuLV0vZywgXCItXCIpfS8ke2lkfWA7XG5cbiAgICAgICAgbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIocHJvcHMuY29uc3RydWN0SW5PdGhlclJlZ2lvbiwgaWQsIHtcbiAgICAgICAgICAgIHBhcmFtZXRlck5hbWUsXG4gICAgICAgICAgICBzdHJpbmdWYWx1ZTogcHJvcHMudmFsdWUocHJvcHMuY29uc3RydWN0SW5PdGhlclJlZ2lvbiksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3NtUGFyYW1ldGVyUmVhZGVyID0gbmV3IFNTTVBhcmFtZXRlclJlYWRlcih0aGlzLCBpZCwge1xuICAgICAgICAgICAgcGFyYW1ldGVyTmFtZSxcbiAgICAgICAgICAgIHJlZ2lvbjogdGhpcy5zdGFja09mQ29uc3RydWN0LnJlZ2lvbixcbiAgICAgICAgICAgIHJlc291cmNlVHlwZTogQ1VTVE9NX1JFU09VUkNFX1RZUEUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5zc21QYXJhbWV0ZXJSZWFkZXIudmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgY2RrRXhwb3J0c1BhcmFtZXRlclByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIGBjZGsvJHt0aGlzLnN0YWNrT2ZDb25zdHJ1Y3Quc3ludGhlc2l6ZXIuYm9vdHN0cmFwUXVhbGlmaWVyfS9leHBvcnRzYDtcbiAgICB9XG59XG4iXX0=