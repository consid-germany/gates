"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gates = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const cdk = require("aws-cdk-lib");
const wafv2 = require("aws-cdk-lib/aws-wafv2");
const route53 = require("aws-cdk-lib/aws-route53");
const route53_targets = require("aws-cdk-lib/aws-route53-targets");
const acm = require("aws-cdk-lib/aws-certificatemanager");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const apigatewayv2 = require("aws-cdk-lib/aws-apigatewayv2");
const apigatewayv2_integrations = require("aws-cdk-lib/aws-apigatewayv2-integrations");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const secretsmanager = require("aws-cdk-lib/aws-secretsmanager");
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const s3 = require("aws-cdk-lib/aws-s3");
const s3_deployment = require("aws-cdk-lib/aws-s3-deployment");
const global_stack_1 = require("./global-stack");
const cross_region_string_ref_1 = require("./cross-region-string-ref");
const path = require("path");
const apigatewayv2_authorizers = require("aws-cdk-lib/aws-apigatewayv2-authorizers");
const SCOPE_CLOUDFRONT = "CLOUDFRONT";
const DEFAULT_APP_NAME = "gates";
const DEFAULT_GITHUB_SUBDOMAIN = "github";
const X_VERIFY_ORIGIN_HEADER_NAME = "x-verify-origin";
class Gates extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { appName = DEFAULT_APP_NAME } = props;
        this.stack = cdk.Stack.of(this);
        this.globalStack = global_stack_1.default.getOrCreate(this, {
            stackName: props.globalStackName || `${this.stack.stackName}-global`,
            tags: this.stack.tags.tagValues(),
        });
        const hostedZone = this.lookupHostedZone(props.domain);
        const gatesTable = this.createGatesTable(appName);
        const apiFunction = this.createApiFunction(appName, gatesTable, props.demoMode);
        const verifyOriginSecret = this.createVerifyOriginSecret(appName);
        const verifyOriginAuthFunction = this.createVerifyOriginAuthFunction(appName, verifyOriginSecret);
        const gatesApi = this.createGatesApi(appName, apiFunction, verifyOriginAuthFunction);
        if (props.gitHubApi !== undefined) {
            const gitHubJwtAuthFunction = this.createGitHubJwtAuthFunction(appName, props.gitHubApi.allowedSubPatterns);
            this.createGitHubApi(appName, apiFunction, gitHubJwtAuthFunction, hostedZone, props.domain);
        }
        const frontendAssetsBucket = this.createFrontendAssetsBucket(props.frontendAssetsBucketName);
        const webDistribution = this.createWebDistribution(appName, frontendAssetsBucket, gatesApi, verifyOriginSecret, hostedZone, props.domain, props.ipAllowList);
        this.createVerifyOriginSecretRotation(verifyOriginSecret, webDistribution, gatesApi);
        this.createFrontendAssetsDeployment(frontendAssetsBucket, webDistribution);
    }
    lookupHostedZone(domain) {
        if (domain === undefined) {
            return undefined;
        }
        return route53.HostedZone.fromLookup(this, "HostedZone", {
            domainName: domain.zoneDomainName || domain.domainName,
        });
    }
    createGitHubJwtAuthFunction(appName, allowedSubPatterns) {
        return new lambda.Function(this, "GitHubJwtAuthFunction", {
            functionName: `${appName}-github-jwt-auth`,
            runtime: lambda.Runtime.NODEJS_20_X,
            code: lambda.Code.fromAsset(path.join(__dirname, "..", "build", "function", "github-jwt-authorizer")),
            handler: "index.handler",
            logRetention: logs.RetentionDays.ONE_WEEK,
            environment: {
                ALLOWED_SUB_PATTERNS: JSON.stringify(allowedSubPatterns),
            },
        });
    }
    createGitHubApi(appName, apiFunction, gitHubJwtAuthFunction, hostedZone, domain) {
        const apiFunctionIntegration = new apigatewayv2_integrations.HttpLambdaIntegration("ApiFunctionGitHubHttpApiIntegration", apiFunction);
        const gitHubJwtAuthorizer = new apigatewayv2_authorizers.HttpLambdaAuthorizer("GitHubJwtAuthorizer", gitHubJwtAuthFunction, {
            responseTypes: [apigatewayv2_authorizers.HttpLambdaResponseType.SIMPLE],
        });
        const httpApi = new apigatewayv2.HttpApi(this, "GitHubHttpApi", {
            apiName: `${appName}-github-api`,
            defaultDomainMapping: this.createGitHubDomainMapping(hostedZone, domain),
        });
        httpApi.addRoutes({
            integration: apiFunctionIntegration,
            authorizer: gitHubJwtAuthorizer,
            path: "/api/gates/{group}/{service}/{environment}/state",
            methods: [apigatewayv2.HttpMethod.GET]
        });
    }
    createGitHubDomainMapping(hostedZone, domain) {
        if (hostedZone === undefined || domain === undefined) {
            return undefined;
        }
        const gitHubApiDomainName = `${domain.gitHubApiSubdomain || DEFAULT_GITHUB_SUBDOMAIN}.${domain.domainName}`;
        const gitHubSubdomainCertificate = new acm.Certificate(this, "GitHubHttpApiCertificate", {
            domainName: gitHubApiDomainName,
            validation: acm.CertificateValidation.fromDns(hostedZone),
        });
        const gitHubHttpApiDomainName = new apigatewayv2.DomainName(this, "GitHubHttpApiDomain", {
            domainName: gitHubApiDomainName,
            certificate: gitHubSubdomainCertificate,
        });
        new route53.ARecord(this, "GitHubHttpApiARecord", {
            recordName: gitHubApiDomainName,
            target: route53.RecordTarget.fromAlias(new route53_targets.ApiGatewayv2DomainProperties(gitHubHttpApiDomainName.regionalDomainName, gitHubHttpApiDomainName.regionalHostedZoneId)),
            zone: hostedZone,
        });
        return {
            domainName: gitHubHttpApiDomainName
        };
    }
    createFrontendAssetsDeployment(frontendAssetsBucket, webDistribution) {
        new s3_deployment.BucketDeployment(this, "BucketDeployment", {
            sources: [s3_deployment.Source.asset(path.join(__dirname, "..", "build", "ui"))],
            destinationBucket: frontendAssetsBucket,
            distribution: webDistribution,
        });
    }
    createFrontendAssetsBucket(bucketName) {
        return new s3.Bucket(this, "FrontendAssetsBucket", {
            bucketName,
            blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
            objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
            autoDeleteObjects: true,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
    }
    createWebDistribution(appName, frontendAssetsBucket, httpApi, verifyOriginSecret, hostedZone, domain, ipAllowList) {
        const cloudfrontOAI = new cloudfront.OriginAccessIdentity(this, "OriginAccessIdentity");
        frontendAssetsBucket.grantRead(cloudfrontOAI);
        const webDistribution = new cloudfront.CloudFrontWebDistribution(this, "WebDistribution", {
            webACLId: this.createGlobalWebAcl(appName, ipAllowList),
            enableIpV6: false,
            viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            viewerCertificate: this.createViewerCertificate(domain),
            originConfigs: [
                {
                    customOriginSource: {
                        domainName: `${httpApi.apiId}.execute-api.${this.stack.region}.amazonaws.com`,
                        originHeaders: {
                            [X_VERIFY_ORIGIN_HEADER_NAME]: verifyOriginSecret.secretValue.unsafeUnwrap(),
                        },
                    },
                    behaviors: [
                        {
                            pathPattern: "/api",
                            allowedMethods: cloudfront.CloudFrontAllowedMethods.ALL,
                            defaultTtl: cdk.Duration.seconds(0),
                        },
                        {
                            pathPattern: "/api/*",
                            allowedMethods: cloudfront.CloudFrontAllowedMethods.ALL,
                            defaultTtl: cdk.Duration.seconds(0),
                        },
                    ],
                },
                {
                    s3OriginSource: {
                        s3BucketSource: frontendAssetsBucket,
                        originAccessIdentity: cloudfrontOAI,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            allowedMethods: cloudfront.CloudFrontAllowedMethods.GET_HEAD_OPTIONS,
                        },
                    ],
                },
            ],
        });
        if (domain !== undefined && hostedZone !== undefined) {
            new route53.ARecord(this, "ARecord", {
                recordName: domain.domainName,
                target: route53.RecordTarget.fromAlias(new route53_targets.CloudFrontTarget(webDistribution)),
                zone: hostedZone,
            });
        }
        return webDistribution;
    }
    createGatesApi(appName, apiFunction, verifyOriginAuthFunction) {
        const apiFunctionIntegration = new apigatewayv2_integrations.HttpLambdaIntegration("ApiFunctionApiIntegration", apiFunction);
        return new apigatewayv2.HttpApi(this, "HttpApi", {
            apiName: `${appName}-api`,
            defaultIntegration: apiFunctionIntegration,
            defaultAuthorizer: new apigatewayv2_authorizers.HttpLambdaAuthorizer("VerifyOriginAuthorizer", verifyOriginAuthFunction, {
                responseTypes: [apigatewayv2_authorizers.HttpLambdaResponseType.SIMPLE],
                identitySource: [`$request.header.${X_VERIFY_ORIGIN_HEADER_NAME}`],
            }),
        });
    }
    createVerifyOriginSecretRotation(verifyOriginSecret, webDistribution, httpApi) {
        const verifyOriginSecretRotationFunction = new lambda.Function(this, "VerifyOriginSecretRotationFunction", {
            functionName: `${verifyOriginSecret.secretName}-rotation`,
            runtime: lambda.Runtime.NODEJS_20_X,
            code: lambda.Code.fromAsset(path.join(__dirname, "..", "build", "function", "verify-origin-secret-rotation")),
            handler: "index.handler",
            logRetention: logs.RetentionDays.ONE_WEEK,
            timeout: cdk.Duration.seconds(30),
            environment: {
                CLOUDFRONT_DISTRIBUTION_ID: webDistribution.distributionId,
                X_VERIFY_ORIGIN_HEADER_NAME,
                ORIGIN_TEST_URL: `https://${httpApi.apiId}.execute-api.${this.stack.region}.amazonaws.com/api/`,
            },
        });
        webDistribution.grant(verifyOriginSecretRotationFunction, "cloudfront:GetDistribution", "cloudfront:GetDistributionConfig", "cloudfront:UpdateDistribution");
        verifyOriginSecret.addRotationSchedule("RotationSchedule", {
            rotationLambda: verifyOriginSecretRotationFunction,
            automaticallyAfter: cdk.Duration.days(1),
        });
    }
    createVerifyOriginAuthFunction(appName, verifyOriginSecret) {
        const verifyOriginAuthFunction = new lambda.Function(this, "VerifyOriginAuthFunction", {
            functionName: `${appName}-verify-origin-auth`,
            runtime: lambda.Runtime.NODEJS_20_X,
            code: lambda.Code.fromAsset(path.join(__dirname, "..", "build", "function", "verify-origin-authorizer")),
            handler: "index.handler",
            logRetention: logs.RetentionDays.ONE_WEEK,
            environment: {
                SECRET_ID: verifyOriginSecret.secretName,
                X_VERIFY_ORIGIN_HEADER_NAME,
            },
        });
        verifyOriginSecret.grantRead(verifyOriginAuthFunction);
        return verifyOriginAuthFunction;
    }
    createVerifyOriginSecret(appName) {
        return new secretsmanager.Secret(this, "VerifyOriginSecret", {
            secretName: `${appName}-verify-origin-secret`,
            generateSecretString: {
                excludePunctuation: true,
            },
        });
    }
    createApiFunction(appName, gatesTable, demoMode) {
        const apiFunction = new lambda.Function(this, "ApiFunction", {
            functionName: `${appName}-api`,
            runtime: lambda.Runtime.PROVIDED_AL2023,
            architecture: lambda.Architecture.ARM_64,
            code: lambda.Code.fromAsset(path.join(__dirname, "..", "build", "api")),
            handler: "provided",
            environment: {
                GATES_DYNAMO_DB_TABLE_NAME: gatesTable.tableName,
                ...(demoMode && { DEMO_MODE: "true" }),
            },
            logRetention: logs.RetentionDays.ONE_WEEK,
        });
        gatesTable.grantReadWriteData(apiFunction);
        return apiFunction;
    }
    createViewerCertificate(domain) {
        if (domain === undefined) {
            return undefined;
        }
        return cloudfront.ViewerCertificate.fromAcmCertificate(this.createGlobalCertificate(domain), {
            aliases: [domain.domainName],
        });
    }
    createGatesTable(appName) {
        return new dynamodb.TableV2(this, "GatesTable", {
            tableName: `${appName}`,
            partitionKey: { name: "group", type: dynamodb.AttributeType.STRING },
            sortKey: { name: "service_environment", type: dynamodb.AttributeType.STRING },
        });
    }
    createGlobalCertificate(domain) {
        const hostedZone = route53.HostedZone.fromLookup(this.globalStack, "HostedZone", {
            domainName: domain.zoneDomainName || domain.domainName,
        });
        const certificate = new acm.Certificate(this.globalStack, "GlobalCertificate", {
            domainName: domain.domainName,
            validation: acm.CertificateValidation.fromDns(hostedZone),
        });
        const certificateArn = new cross_region_string_ref_1.default(this, "GlobalCertificateArn", {
            constructInOtherRegion: certificate,
            value: (certificate) => certificate.certificateArn,
        }).value;
        return acm.Certificate.fromCertificateArn(this, "GlobalCertificate", certificateArn);
    }
    createGlobalWebAcl(appName, ipAllowList) {
        if (ipAllowList === undefined) {
            return undefined;
        }
        const ipSet = new wafv2.CfnIPSet(this.globalStack, "IpSet", {
            name: `${appName}-ip-allow-list`,
            addresses: [...ipAllowList],
            ipAddressVersion: "IPV4",
            scope: "CLOUDFRONT",
        });
        const ipAllowListRule = {
            name: `${appName}-waf-ip-allow-list-rule`,
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: `${appName}-waf-ip-allow-list`,
                sampledRequestsEnabled: true,
            },
            priority: 0,
            action: { allow: {} },
            statement: {
                ipSetReferenceStatement: {
                    arn: ipSet.attrArn,
                },
            },
        };
        const webAcl = new wafv2.CfnWebACL(this.globalStack, "WebAcl", {
            name: `${appName}-waf`,
            defaultAction: { block: {} },
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: `${appName}-waf`,
                sampledRequestsEnabled: true,
            },
            scope: SCOPE_CLOUDFRONT,
            rules: [ipAllowListRule],
        });
        return new cross_region_string_ref_1.default(this, "WebAclArn", {
            constructInOtherRegion: webAcl,
            value: (webAcl) => webAcl.attrArn,
        }).value;
    }
}
exports.Gates = Gates;
_a = JSII_RTTI_SYMBOL_1;
Gates[_a] = { fqn: "@consid-germany/gates.Gates", version: "1.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2F0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLCtDQUErQztBQUMvQyxtREFBbUQ7QUFDbkQsbUVBQW1FO0FBQ25FLDBEQUEwRDtBQUMxRCxpREFBaUQ7QUFDakQsNkNBQTZDO0FBQzdDLDZEQUE2RDtBQUM3RCx1RkFBdUY7QUFDdkYscURBQXFEO0FBQ3JELGlFQUFpRTtBQUNqRSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLCtEQUErRDtBQUMvRCxpREFBaUQ7QUFDakQsdUVBQTZEO0FBQzdELDZCQUE2QjtBQUM3QixxRkFBcUY7QUE4QnJGLE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO0FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDO0FBQ2pDLE1BQU0sd0JBQXdCLEdBQUcsUUFBUSxDQUFDO0FBQzFDLE1BQU0sMkJBQTJCLEdBQUcsaUJBQWlCLENBQUM7QUFFdEQsTUFBYSxLQUFNLFNBQVEsc0JBQVM7SUFJaEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQjtRQUN2RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sRUFBRSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFFN0MsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLHNCQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDckQsU0FBUyxFQUFFLEtBQUssQ0FBQyxlQUFlLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsU0FBUztZQUNwRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFF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c0JBQXNCLEVBQUUsTUFBTTtZQUM5QixLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPO1NBQ3BDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDYixDQUFDOztBQXJiTCxzQkFzYkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnN0cnVjdH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIHdhZnYyIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtd2FmdjJcIjtcbmltcG9ydCAqIGFzIHJvdXRlNTMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1yb3V0ZTUzXCI7XG5pbXBvcnQgKiBhcyByb3V0ZTUzX3RhcmdldHMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1yb3V0ZTUzLXRhcmdldHNcIjtcbmltcG9ydCAqIGFzIGFjbSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNlcnRpZmljYXRlbWFuYWdlclwiO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBsb2dzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbG9nc1wiO1xuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheXYyIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheXYyXCI7XG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5djJfaW50ZWdyYXRpb25zIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheXYyLWludGVncmF0aW9uc1wiO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0ICogYXMgc2VjcmV0c21hbmFnZXIgZnJvbSBcImF3cy1jZGstbGliL2F3cy1zZWNyZXRzbWFuYWdlclwiO1xuaW1wb3J0ICogYXMgY2xvdWRmcm9udCBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNsb3VkZnJvbnRcIjtcbmltcG9ydCAqIGFzIHMzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtczNcIjtcbmltcG9ydCAqIGFzIHMzX2RlcGxveW1lbnQgZnJvbSBcImF3cy1jZGstbGliL2F3cy1zMy1kZXBsb3ltZW50XCI7XG5pbXBvcnQgR2xvYmFsU3RhY2tQcm92aWRlciBmcm9tIFwiLi9nbG9iYWwtc3RhY2tcIjtcbmltcG9ydCBDcm9zc1JlZ2lvblN0cmluZ1JlZiBmcm9tIFwiLi9jcm9zcy1yZWdpb24tc3RyaW5nLXJlZlwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgYXBpZ2F0ZXdheXYyX2F1dGhvcml6ZXJzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheXYyLWF1dGhvcml6ZXJzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9tYWluIHtcbiAgICByZWFkb25seSBkb21haW5OYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgem9uZURvbWFpbk5hbWU/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZ2l0SHViQXBpU3ViZG9tYWluPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdpdEh1YkFwaSB7XG4gICAgcmVhZG9ubHkgYWxsb3dlZFN1YlBhdHRlcm5zOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYXRlc1Byb3BzIHtcbiAgICAvKipcbiAgICAgKiBBIG5hbWUgZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBhcHAgbmFtZSBgZ2F0ZXNgIGlzIHVzZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXBwTmFtZT86IHN0cmluZztcbiAgICByZWFkb25seSBkb21haW4/OiBEb21haW47XG5cbiAgICByZWFkb25seSBpcEFsbG93TGlzdD86IHN0cmluZ1tdO1xuXG4gICAgcmVhZG9ubHkgZ2l0SHViQXBpPzogR2l0SHViQXBpO1xuXG4gICAgcmVhZG9ubHkgZ2xvYmFsU3RhY2tOYW1lPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGZyb250ZW5kQXNzZXRzQnVja2V0TmFtZT86IHN0cmluZztcblxuICAgIHJlYWRvbmx5IGRlbW9Nb2RlPzogYm9vbGVhbjtcbn1cblxuY29uc3QgU0NPUEVfQ0xPVURGUk9OVCA9IFwiQ0xPVURGUk9OVFwiO1xuY29uc3QgREVGQVVMVF9BUFBfTkFNRSA9IFwiZ2F0ZXNcIjtcbmNvbnN0IERFRkFVTFRfR0lUSFVCX1NVQkRPTUFJTiA9IFwiZ2l0aHViXCI7XG5jb25zdCBYX1ZFUklGWV9PUklHSU5fSEVBREVSX05BTUUgPSBcIngtdmVyaWZ5LW9yaWdpblwiO1xuXG5leHBvcnQgY2xhc3MgR2F0ZXMgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RhY2s6IGNkay5TdGFjaztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdsb2JhbFN0YWNrOiBjZGsuU3RhY2s7XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogR2F0ZXNQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHsgYXBwTmFtZSA9IERFRkFVTFRfQVBQX05BTUUgfSA9IHByb3BzO1xuXG4gICAgICAgIHRoaXMuc3RhY2sgPSBjZGsuU3RhY2sub2YodGhpcyk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RhY2sgPSBHbG9iYWxTdGFja1Byb3ZpZGVyLmdldE9yQ3JlYXRlKHRoaXMsIHtcbiAgICAgICAgICAgIHN0YWNrTmFtZTogcHJvcHMuZ2xvYmFsU3RhY2tOYW1lIHx8IGAke3RoaXMuc3RhY2suc3RhY2tOYW1lfS1nbG9iYWxgLFxuICAgICAgICAgICAgdGFnczogdGhpcy5zdGFjay50YWdzLnRhZ1ZhbHVlcygpLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBob3N0ZWRab25lID0gdGhpcy5sb29rdXBIb3N0ZWRab25lKHByb3BzLmRvbWFpbik7XG5cbiAgICAgICAgY29uc3QgZ2F0ZXNUYWJsZSA9IHRoaXMuY3JlYXRlR2F0ZXNUYWJsZShhcHBOYW1lKTtcbiAgICAgICAgY29uc3QgYXBpRnVuY3Rpb24gPSB0aGlzLmNyZWF0ZUFwaUZ1bmN0aW9uKGFwcE5hbWUsIGdhdGVzVGFibGUsIHByb3BzLmRlbW9Nb2RlKTtcblxuICAgICAgICBjb25zdCB2ZXJpZnlPcmlnaW5TZWNyZXQgPSB0aGlzLmNyZWF0ZVZlcmlmeU9yaWdpblNlY3JldChhcHBOYW1lKTtcbiAgICAgICAgY29uc3QgdmVyaWZ5T3JpZ2luQXV0aEZ1bmN0aW9uID0gdGhpcy5jcmVhdGVWZXJpZnlPcmlnaW5BdXRoRnVuY3Rpb24oXG4gICAgICAgICAgICBhcHBOYW1lLFxuICAgICAgICAgICAgdmVyaWZ5T3JpZ2luU2VjcmV0LFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGdhdGVzQXBpID0gdGhpcy5jcmVhdGVHYXRlc0FwaShcbiAgICAgICAgICAgIGFwcE5hbWUsXG4gICAgICAgICAgICBhcGlGdW5jdGlvbixcbiAgICAgICAgICAgIHZlcmlmeU9yaWdpbkF1dGhGdW5jdGlvbixcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAocHJvcHMuZ2l0SHViQXBpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGdpdEh1Ykp3dEF1dGhGdW5jdGlvbiA9IHRoaXMuY3JlYXRlR2l0SHViSnd0QXV0aEZ1bmN0aW9uKGFwcE5hbWUsIHByb3BzLmdpdEh1YkFwaS5hbGxvd2VkU3ViUGF0dGVybnMpO1xuXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUdpdEh1YkFwaShcbiAgICAgICAgICAgICAgICBhcHBOYW1lLFxuICAgICAgICAgICAgICAgIGFwaUZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIGdpdEh1Ykp3dEF1dGhGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBob3N0ZWRab25lLFxuICAgICAgICAgICAgICAgIHByb3BzLmRvbWFpblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZyb250ZW5kQXNzZXRzQnVja2V0ID0gdGhpcy5jcmVhdGVGcm9udGVuZEFzc2V0c0J1Y2tldChcbiAgICAgICAgICAgIHByb3BzLmZyb250ZW5kQXNzZXRzQnVja2V0TmFtZSxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCB3ZWJEaXN0cmlidXRpb24gPSB0aGlzLmNyZWF0ZVdlYkRpc3RyaWJ1dGlvbihcbiAgICAgICAgICAgIGFwcE5hbWUsXG4gICAgICAgICAgICBmcm9udGVuZEFzc2V0c0J1Y2tldCxcbiAgICAgICAgICAgIGdhdGVzQXBpLFxuICAgICAgICAgICAgdmVyaWZ5T3JpZ2luU2VjcmV0LFxuICAgICAgICAgICAgaG9zdGVkWm9uZSxcbiAgICAgICAgICAgIHByb3BzLmRvbWFpbixcbiAgICAgICAgICAgIHByb3BzLmlwQWxsb3dMaXN0LFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlVmVyaWZ5T3JpZ2luU2VjcmV0Um90YXRpb24odmVyaWZ5T3JpZ2luU2VjcmV0LCB3ZWJEaXN0cmlidXRpb24sIGdhdGVzQXBpKTtcbiAgICAgICAgdGhpcy5jcmVhdGVGcm9udGVuZEFzc2V0c0RlcGxveW1lbnQoZnJvbnRlbmRBc3NldHNCdWNrZXQsIHdlYkRpc3RyaWJ1dGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb29rdXBIb3N0ZWRab25lKGRvbWFpbj86IERvbWFpbikge1xuICAgICAgICBpZiAoZG9tYWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tTG9va3VwKHRoaXMsIFwiSG9zdGVkWm9uZVwiLCB7XG4gICAgICAgICAgICBkb21haW5OYW1lOiBkb21haW4uem9uZURvbWFpbk5hbWUgfHwgZG9tYWluLmRvbWFpbk5hbWUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlR2l0SHViSnd0QXV0aEZ1bmN0aW9uKGFwcE5hbWU6IHN0cmluZywgYWxsb3dlZFN1YlBhdHRlcm5zOiBzdHJpbmdbXSkge1xuICAgICAgICByZXR1cm4gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkdpdEh1Ykp3dEF1dGhGdW5jdGlvblwiLCB7XG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGAke2FwcE5hbWV9LWdpdGh1Yi1qd3QtYXV0aGAsXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMjBfWCxcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uXCIsIFwiYnVpbGRcIiwgXCJmdW5jdGlvblwiLCBcImdpdGh1Yi1qd3QtYXV0aG9yaXplclwiKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoYW5kbGVyOiBcImluZGV4LmhhbmRsZXJcIixcbiAgICAgICAgICAgIGxvZ1JldGVudGlvbjogbG9ncy5SZXRlbnRpb25EYXlzLk9ORV9XRUVLLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICBBTExPV0VEX1NVQl9QQVRURVJOUzogSlNPTi5zdHJpbmdpZnkoYWxsb3dlZFN1YlBhdHRlcm5zKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlR2l0SHViQXBpKFxuICAgICAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgICAgIGFwaUZ1bmN0aW9uOiBsYW1iZGEuRnVuY3Rpb24sXG4gICAgICAgIGdpdEh1Ykp3dEF1dGhGdW5jdGlvbjogbGFtYmRhLkZ1bmN0aW9uLFxuICAgICAgICBob3N0ZWRab25lPzogcm91dGU1My5JSG9zdGVkWm9uZSxcbiAgICAgICAgZG9tYWluPzogRG9tYWluLFxuICAgICkge1xuICAgICAgICBjb25zdCBhcGlGdW5jdGlvbkludGVncmF0aW9uID0gbmV3IGFwaWdhdGV3YXl2Ml9pbnRlZ3JhdGlvbnMuSHR0cExhbWJkYUludGVncmF0aW9uKFxuICAgICAgICAgICAgXCJBcGlGdW5jdGlvbkdpdEh1Ykh0dHBBcGlJbnRlZ3JhdGlvblwiLFxuICAgICAgICAgICAgYXBpRnVuY3Rpb24sXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZ2l0SHViSnd0QXV0aG9yaXplciA9IG5ldyBhcGlnYXRld2F5djJfYXV0aG9yaXplcnMuSHR0cExhbWJkYUF1dGhvcml6ZXIoXG4gICAgICAgICAgICBcIkdpdEh1Ykp3dEF1dGhvcml6ZXJcIixcbiAgICAgICAgICAgIGdpdEh1Ykp3dEF1dGhGdW5jdGlvbixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGVzOiBbYXBpZ2F0ZXdheXYyX2F1dGhvcml6ZXJzLkh0dHBMYW1iZGFSZXNwb25zZVR5cGUuU0lNUExFXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgaHR0cEFwaSA9IG5ldyBhcGlnYXRld2F5djIuSHR0cEFwaSh0aGlzLCBcIkdpdEh1Ykh0dHBBcGlcIiwge1xuICAgICAgICAgICAgYXBpTmFtZTogYCR7YXBwTmFtZX0tZ2l0aHViLWFwaWAsXG4gICAgICAgICAgICBkZWZhdWx0RG9tYWluTWFwcGluZzogdGhpcy5jcmVhdGVHaXRIdWJEb21haW5NYXBwaW5nKGhvc3RlZFpvbmUsIGRvbWFpbiksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGh0dHBBcGkuYWRkUm91dGVzKHtcbiAgICAgICAgICAgIGludGVncmF0aW9uOiBhcGlGdW5jdGlvbkludGVncmF0aW9uLFxuICAgICAgICAgICAgYXV0aG9yaXplcjogZ2l0SHViSnd0QXV0aG9yaXplcixcbiAgICAgICAgICAgIHBhdGg6IFwiL2FwaS9nYXRlcy97Z3JvdXB9L3tzZXJ2aWNlfS97ZW52aXJvbm1lbnR9L3N0YXRlXCIsXG4gICAgICAgICAgICBtZXRob2RzOiBbYXBpZ2F0ZXdheXYyLkh0dHBNZXRob2QuR0VUXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUdpdEh1YkRvbWFpbk1hcHBpbmcoaG9zdGVkWm9uZT86IHJvdXRlNTMuSUhvc3RlZFpvbmUsIGRvbWFpbj86IERvbWFpbik6IGFwaWdhdGV3YXl2Mi5Eb21haW5NYXBwaW5nT3B0aW9ucyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmIChob3N0ZWRab25lID09PSB1bmRlZmluZWQgfHwgZG9tYWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBnaXRIdWJBcGlEb21haW5OYW1lID0gYCR7ZG9tYWluLmdpdEh1YkFwaVN1YmRvbWFpbiB8fCBERUZBVUxUX0dJVEhVQl9TVUJET01BSU59LiR7ZG9tYWluLmRvbWFpbk5hbWV9YDtcblxuICAgICAgICBjb25zdCBnaXRIdWJTdWJkb21haW5DZXJ0aWZpY2F0ZSA9IG5ldyBhY20uQ2VydGlmaWNhdGUodGhpcywgXCJHaXRIdWJIdHRwQXBpQ2VydGlmaWNhdGVcIiwge1xuICAgICAgICAgICAgZG9tYWluTmFtZTogZ2l0SHViQXBpRG9tYWluTmFtZSxcbiAgICAgICAgICAgIHZhbGlkYXRpb246IGFjbS5DZXJ0aWZpY2F0ZVZhbGlkYXRpb24uZnJvbURucyhob3N0ZWRab25lKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZ2l0SHViSHR0cEFwaURvbWFpbk5hbWUgPSBuZXcgYXBpZ2F0ZXdheXYyLkRvbWFpbk5hbWUodGhpcywgXCJHaXRIdWJIdHRwQXBpRG9tYWluXCIsIHtcbiAgICAgICAgICAgIGRvbWFpbk5hbWU6IGdpdEh1YkFwaURvbWFpbk5hbWUsXG4gICAgICAgICAgICBjZXJ0aWZpY2F0ZTogZ2l0SHViU3ViZG9tYWluQ2VydGlmaWNhdGUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyByb3V0ZTUzLkFSZWNvcmQodGhpcywgXCJHaXRIdWJIdHRwQXBpQVJlY29yZFwiLCB7XG4gICAgICAgICAgICByZWNvcmROYW1lOiBnaXRIdWJBcGlEb21haW5OYW1lLFxuICAgICAgICAgICAgdGFyZ2V0OiByb3V0ZTUzLlJlY29yZFRhcmdldC5mcm9tQWxpYXMoXG4gICAgICAgICAgICAgICAgbmV3IHJvdXRlNTNfdGFyZ2V0cy5BcGlHYXRld2F5djJEb21haW5Qcm9wZXJ0aWVzKFxuICAgICAgICAgICAgICAgICAgICBnaXRIdWJIdHRwQXBpRG9tYWluTmFtZS5yZWdpb25hbERvbWFpbk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGdpdEh1Ykh0dHBBcGlEb21haW5OYW1lLnJlZ2lvbmFsSG9zdGVkWm9uZUlkKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB6b25lOiBob3N0ZWRab25lLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9tYWluTmFtZTogZ2l0SHViSHR0cEFwaURvbWFpbk5hbWVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUZyb250ZW5kQXNzZXRzRGVwbG95bWVudChcbiAgICAgICAgZnJvbnRlbmRBc3NldHNCdWNrZXQ6IHMzLkJ1Y2tldCxcbiAgICAgICAgd2ViRGlzdHJpYnV0aW9uOiBjbG91ZGZyb250LkNsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24sXG4gICAgKSB7XG4gICAgICAgIG5ldyBzM19kZXBsb3ltZW50LkJ1Y2tldERlcGxveW1lbnQodGhpcywgXCJCdWNrZXREZXBsb3ltZW50XCIsIHtcbiAgICAgICAgICAgIHNvdXJjZXM6IFtzM19kZXBsb3ltZW50LlNvdXJjZS5hc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uXCIsIFwiYnVpbGRcIiwgXCJ1aVwiKSldLFxuICAgICAgICAgICAgZGVzdGluYXRpb25CdWNrZXQ6IGZyb250ZW5kQXNzZXRzQnVja2V0LFxuICAgICAgICAgICAgZGlzdHJpYnV0aW9uOiB3ZWJEaXN0cmlidXRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRnJvbnRlbmRBc3NldHNCdWNrZXQoYnVja2V0TmFtZT86IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbmV3IHMzLkJ1Y2tldCh0aGlzLCBcIkZyb250ZW5kQXNzZXRzQnVja2V0XCIsIHtcbiAgICAgICAgICAgIGJ1Y2tldE5hbWUsXG4gICAgICAgICAgICBibG9ja1B1YmxpY0FjY2VzczogczMuQmxvY2tQdWJsaWNBY2Nlc3MuQkxPQ0tfQUxMLFxuICAgICAgICAgICAgb2JqZWN0T3duZXJzaGlwOiBzMy5PYmplY3RPd25lcnNoaXAuQlVDS0VUX09XTkVSX0VORk9SQ0VELFxuICAgICAgICAgICAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gICAgICAgICAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVdlYkRpc3RyaWJ1dGlvbihcbiAgICAgICAgYXBwTmFtZTogc3RyaW5nLFxuICAgICAgICBmcm9udGVuZEFzc2V0c0J1Y2tldDogczMuQnVja2V0LFxuICAgICAgICBodHRwQXBpOiBhcGlnYXRld2F5djIuSHR0cEFwaSxcbiAgICAgICAgdmVyaWZ5T3JpZ2luU2VjcmV0OiBzZWNyZXRzbWFuYWdlci5TZWNyZXQsXG4gICAgICAgIGhvc3RlZFpvbmU/OiByb3V0ZTUzLklIb3N0ZWRab25lLFxuICAgICAgICBkb21haW4/OiBEb21haW4sXG4gICAgICAgIGlwQWxsb3dMaXN0Pzogc3RyaW5nW10sXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGNsb3VkZnJvbnRPQUkgPSBuZXcgY2xvdWRmcm9udC5PcmlnaW5BY2Nlc3NJZGVudGl0eSh0aGlzLCBcIk9yaWdpbkFjY2Vzc0lkZW50aXR5XCIpO1xuICAgICAgICBmcm9udGVuZEFzc2V0c0J1Y2tldC5ncmFudFJlYWQoY2xvdWRmcm9udE9BSSk7XG5cbiAgICAgICAgY29uc3Qgd2ViRGlzdHJpYnV0aW9uID0gbmV3IGNsb3VkZnJvbnQuQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbih0aGlzLCBcIldlYkRpc3RyaWJ1dGlvblwiLCB7XG4gICAgICAgICAgICB3ZWJBQ0xJZDogdGhpcy5jcmVhdGVHbG9iYWxXZWJBY2woYXBwTmFtZSwgaXBBbGxvd0xpc3QpLFxuICAgICAgICAgICAgZW5hYmxlSXBWNjogZmFsc2UsXG4gICAgICAgICAgICB2aWV3ZXJQcm90b2NvbFBvbGljeTogY2xvdWRmcm9udC5WaWV3ZXJQcm90b2NvbFBvbGljeS5SRURJUkVDVF9UT19IVFRQUyxcbiAgICAgICAgICAgIHZpZXdlckNlcnRpZmljYXRlOiB0aGlzLmNyZWF0ZVZpZXdlckNlcnRpZmljYXRlKGRvbWFpbiksXG4gICAgICAgICAgICBvcmlnaW5Db25maWdzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbk5hbWU6IGAke2h0dHBBcGkuYXBpSWR9LmV4ZWN1dGUtYXBpLiR7dGhpcy5zdGFjay5yZWdpb259LmFtYXpvbmF3cy5jb21gLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luSGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtYX1ZFUklGWV9PUklHSU5fSEVBREVSX05BTUVdOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlPcmlnaW5TZWNyZXQuc2VjcmV0VmFsdWUudW5zYWZlVW53cmFwKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoUGF0dGVybjogXCIvYXBpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHM6IGNsb3VkZnJvbnQuQ2xvdWRGcm9udEFsbG93ZWRNZXRob2RzLkFMTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VHRsOiBjZGsuRHVyYXRpb24uc2Vjb25kcygwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFBhdHRlcm46IFwiL2FwaS8qXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHM6IGNsb3VkZnJvbnQuQ2xvdWRGcm9udEFsbG93ZWRNZXRob2RzLkFMTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VHRsOiBjZGsuRHVyYXRpb24uc2Vjb25kcygwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogZnJvbnRlbmRBc3NldHNCdWNrZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5BY2Nlc3NJZGVudGl0eTogY2xvdWRmcm9udE9BSSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHM6IGNsb3VkZnJvbnQuQ2xvdWRGcm9udEFsbG93ZWRNZXRob2RzLkdFVF9IRUFEX09QVElPTlMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZG9tYWluICE9PSB1bmRlZmluZWQgJiYgaG9zdGVkWm9uZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXcgcm91dGU1My5BUmVjb3JkKHRoaXMsIFwiQVJlY29yZFwiLCB7XG4gICAgICAgICAgICAgICAgcmVjb3JkTmFtZTogZG9tYWluLmRvbWFpbk5hbWUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByb3V0ZTUzLlJlY29yZFRhcmdldC5mcm9tQWxpYXMoXG4gICAgICAgICAgICAgICAgICAgIG5ldyByb3V0ZTUzX3RhcmdldHMuQ2xvdWRGcm9udFRhcmdldCh3ZWJEaXN0cmlidXRpb24pLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgem9uZTogaG9zdGVkWm9uZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHdlYkRpc3RyaWJ1dGlvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUdhdGVzQXBpKFxuICAgICAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgICAgIGFwaUZ1bmN0aW9uOiBsYW1iZGEuRnVuY3Rpb24sXG4gICAgICAgIHZlcmlmeU9yaWdpbkF1dGhGdW5jdGlvbjogbGFtYmRhLkZ1bmN0aW9uLFxuICAgICkge1xuICAgICAgICBjb25zdCBhcGlGdW5jdGlvbkludGVncmF0aW9uID0gbmV3IGFwaWdhdGV3YXl2Ml9pbnRlZ3JhdGlvbnMuSHR0cExhbWJkYUludGVncmF0aW9uKFxuICAgICAgICAgICAgXCJBcGlGdW5jdGlvbkFwaUludGVncmF0aW9uXCIsXG4gICAgICAgICAgICBhcGlGdW5jdGlvbixcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gbmV3IGFwaWdhdGV3YXl2Mi5IdHRwQXBpKHRoaXMsIFwiSHR0cEFwaVwiLCB7XG4gICAgICAgICAgICBhcGlOYW1lOiBgJHthcHBOYW1lfS1hcGlgLFxuICAgICAgICAgICAgZGVmYXVsdEludGVncmF0aW9uOiBhcGlGdW5jdGlvbkludGVncmF0aW9uLFxuICAgICAgICAgICAgZGVmYXVsdEF1dGhvcml6ZXI6IG5ldyBhcGlnYXRld2F5djJfYXV0aG9yaXplcnMuSHR0cExhbWJkYUF1dGhvcml6ZXIoXG4gICAgICAgICAgICAgICAgXCJWZXJpZnlPcmlnaW5BdXRob3JpemVyXCIsXG4gICAgICAgICAgICAgICAgdmVyaWZ5T3JpZ2luQXV0aEZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlczogW2FwaWdhdGV3YXl2Ml9hdXRob3JpemVycy5IdHRwTGFtYmRhUmVzcG9uc2VUeXBlLlNJTVBMRV0sXG4gICAgICAgICAgICAgICAgICAgIGlkZW50aXR5U291cmNlOiBbYCRyZXF1ZXN0LmhlYWRlci4ke1hfVkVSSUZZX09SSUdJTl9IRUFERVJfTkFNRX1gXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVWZXJpZnlPcmlnaW5TZWNyZXRSb3RhdGlvbihcbiAgICAgICAgdmVyaWZ5T3JpZ2luU2VjcmV0OiBzZWNyZXRzbWFuYWdlci5TZWNyZXQsXG4gICAgICAgIHdlYkRpc3RyaWJ1dGlvbjogY2xvdWRmcm9udC5DbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uLFxuICAgICAgICBodHRwQXBpOiBhcGlnYXRld2F5djIuSHR0cEFwaSxcbiAgICApIHtcbiAgICAgICAgY29uc3QgdmVyaWZ5T3JpZ2luU2VjcmV0Um90YXRpb25GdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgXCJWZXJpZnlPcmlnaW5TZWNyZXRSb3RhdGlvbkZ1bmN0aW9uXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBgJHt2ZXJpZnlPcmlnaW5TZWNyZXQuc2VjcmV0TmFtZX0tcm90YXRpb25gLFxuICAgICAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18yMF9YLFxuICAgICAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcImJ1aWxkXCIsIFwiZnVuY3Rpb25cIiwgXCJ2ZXJpZnktb3JpZ2luLXNlY3JldC1yb3RhdGlvblwiKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IFwiaW5kZXguaGFuZGxlclwiLFxuICAgICAgICAgICAgICAgIGxvZ1JldGVudGlvbjogbG9ncy5SZXRlbnRpb25EYXlzLk9ORV9XRUVLLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgICAgICBDTE9VREZST05UX0RJU1RSSUJVVElPTl9JRDogd2ViRGlzdHJpYnV0aW9uLmRpc3RyaWJ1dGlvbklkLFxuICAgICAgICAgICAgICAgICAgICBYX1ZFUklGWV9PUklHSU5fSEVBREVSX05BTUUsXG4gICAgICAgICAgICAgICAgICAgIE9SSUdJTl9URVNUX1VSTDogYGh0dHBzOi8vJHtodHRwQXBpLmFwaUlkfS5leGVjdXRlLWFwaS4ke3RoaXMuc3RhY2sucmVnaW9ufS5hbWF6b25hd3MuY29tL2FwaS9gLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuXG4gICAgICAgIHdlYkRpc3RyaWJ1dGlvbi5ncmFudChcbiAgICAgICAgICAgIHZlcmlmeU9yaWdpblNlY3JldFJvdGF0aW9uRnVuY3Rpb24sXG4gICAgICAgICAgICBcImNsb3VkZnJvbnQ6R2V0RGlzdHJpYnV0aW9uXCIsXG4gICAgICAgICAgICBcImNsb3VkZnJvbnQ6R2V0RGlzdHJpYnV0aW9uQ29uZmlnXCIsXG4gICAgICAgICAgICBcImNsb3VkZnJvbnQ6VXBkYXRlRGlzdHJpYnV0aW9uXCIsXG4gICAgICAgICk7XG5cbiAgICAgICAgdmVyaWZ5T3JpZ2luU2VjcmV0LmFkZFJvdGF0aW9uU2NoZWR1bGUoXCJSb3RhdGlvblNjaGVkdWxlXCIsIHtcbiAgICAgICAgICAgIHJvdGF0aW9uTGFtYmRhOiB2ZXJpZnlPcmlnaW5TZWNyZXRSb3RhdGlvbkZ1bmN0aW9uLFxuICAgICAgICAgICAgYXV0b21hdGljYWxseUFmdGVyOiBjZGsuRHVyYXRpb24uZGF5cygxKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVWZXJpZnlPcmlnaW5BdXRoRnVuY3Rpb24oXG4gICAgICAgIGFwcE5hbWU6IHN0cmluZyxcbiAgICAgICAgdmVyaWZ5T3JpZ2luU2VjcmV0OiBzZWNyZXRzbWFuYWdlci5TZWNyZXQsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHZlcmlmeU9yaWdpbkF1dGhGdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgXCJWZXJpZnlPcmlnaW5BdXRoRnVuY3Rpb25cIiwge1xuICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBgJHthcHBOYW1lfS12ZXJpZnktb3JpZ2luLWF1dGhgLFxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzIwX1gsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoXG4gICAgICAgICAgICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcImJ1aWxkXCIsIFwiZnVuY3Rpb25cIiwgXCJ2ZXJpZnktb3JpZ2luLWF1dGhvcml6ZXJcIiksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaGFuZGxlcjogXCJpbmRleC5oYW5kbGVyXCIsXG4gICAgICAgICAgICBsb2dSZXRlbnRpb246IGxvZ3MuUmV0ZW50aW9uRGF5cy5PTkVfV0VFSyxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgU0VDUkVUX0lEOiB2ZXJpZnlPcmlnaW5TZWNyZXQuc2VjcmV0TmFtZSxcbiAgICAgICAgICAgICAgICBYX1ZFUklGWV9PUklHSU5fSEVBREVSX05BTUUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICB2ZXJpZnlPcmlnaW5TZWNyZXQuZ3JhbnRSZWFkKHZlcmlmeU9yaWdpbkF1dGhGdW5jdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIHZlcmlmeU9yaWdpbkF1dGhGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVZlcmlmeU9yaWdpblNlY3JldChhcHBOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzZWNyZXRzbWFuYWdlci5TZWNyZXQodGhpcywgXCJWZXJpZnlPcmlnaW5TZWNyZXRcIiwge1xuICAgICAgICAgICAgc2VjcmV0TmFtZTogYCR7YXBwTmFtZX0tdmVyaWZ5LW9yaWdpbi1zZWNyZXRgLFxuICAgICAgICAgICAgZ2VuZXJhdGVTZWNyZXRTdHJpbmc6IHtcbiAgICAgICAgICAgICAgICBleGNsdWRlUHVuY3R1YXRpb246IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUFwaUZ1bmN0aW9uKGFwcE5hbWU6IHN0cmluZywgZ2F0ZXNUYWJsZTogZHluYW1vZGIuVGFibGVWMiwgZGVtb01vZGU/OiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IGFwaUZ1bmN0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkFwaUZ1bmN0aW9uXCIsIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogYCR7YXBwTmFtZX0tYXBpYCxcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlBST1ZJREVEX0FMMjAyMyxcbiAgICAgICAgICAgIGFyY2hpdGVjdHVyZTogbGFtYmRhLkFyY2hpdGVjdHVyZS5BUk1fNjQsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoXG4gICAgICAgICAgICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLlwiLCBcImJ1aWxkXCIsIFwiYXBpXCIpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGhhbmRsZXI6IFwicHJvdmlkZWRcIixcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgR0FURVNfRFlOQU1PX0RCX1RBQkxFX05BTUU6IGdhdGVzVGFibGUudGFibGVOYW1lLFxuICAgICAgICAgICAgICAgIC4uLihkZW1vTW9kZSAmJiB7IERFTU9fTU9ERTogXCJ0cnVlXCIgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9nUmV0ZW50aW9uOiBsb2dzLlJldGVudGlvbkRheXMuT05FX1dFRUssXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdhdGVzVGFibGUuZ3JhbnRSZWFkV3JpdGVEYXRhKGFwaUZ1bmN0aW9uKTtcblxuICAgICAgICByZXR1cm4gYXBpRnVuY3Rpb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVWaWV3ZXJDZXJ0aWZpY2F0ZShkb21haW4/OiBEb21haW4pIHtcbiAgICAgICAgaWYgKGRvbWFpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb3VkZnJvbnQuVmlld2VyQ2VydGlmaWNhdGUuZnJvbUFjbUNlcnRpZmljYXRlKFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVHbG9iYWxDZXJ0aWZpY2F0ZShkb21haW4pLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFsaWFzZXM6IFtkb21haW4uZG9tYWluTmFtZV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlR2F0ZXNUYWJsZShhcHBOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkeW5hbW9kYi5UYWJsZVYyKHRoaXMsIFwiR2F0ZXNUYWJsZVwiLCB7XG4gICAgICAgICAgICB0YWJsZU5hbWU6IGAke2FwcE5hbWV9YCxcbiAgICAgICAgICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiBcImdyb3VwXCIsIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXG4gICAgICAgICAgICBzb3J0S2V5OiB7IG5hbWU6IFwic2VydmljZV9lbnZpcm9ubWVudFwiLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUdsb2JhbENlcnRpZmljYXRlKGRvbWFpbjogRG9tYWluKSB7XG4gICAgICAgIGNvbnN0IGhvc3RlZFpvbmUgPSByb3V0ZTUzLkhvc3RlZFpvbmUuZnJvbUxvb2t1cCh0aGlzLmdsb2JhbFN0YWNrLCBcIkhvc3RlZFpvbmVcIiwge1xuICAgICAgICAgICAgZG9tYWluTmFtZTogZG9tYWluLnpvbmVEb21haW5OYW1lIHx8IGRvbWFpbi5kb21haW5OYW1lLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjZXJ0aWZpY2F0ZSA9IG5ldyBhY20uQ2VydGlmaWNhdGUodGhpcy5nbG9iYWxTdGFjaywgXCJHbG9iYWxDZXJ0aWZpY2F0ZVwiLCB7XG4gICAgICAgICAgICBkb21haW5OYW1lOiBkb21haW4uZG9tYWluTmFtZSxcbiAgICAgICAgICAgIHZhbGlkYXRpb246IGFjbS5DZXJ0aWZpY2F0ZVZhbGlkYXRpb24uZnJvbURucyhob3N0ZWRab25lKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2VydGlmaWNhdGVBcm4gPSBuZXcgQ3Jvc3NSZWdpb25TdHJpbmdSZWYodGhpcywgXCJHbG9iYWxDZXJ0aWZpY2F0ZUFyblwiLCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RJbk90aGVyUmVnaW9uOiBjZXJ0aWZpY2F0ZSxcbiAgICAgICAgICAgIHZhbHVlOiAoY2VydGlmaWNhdGUpID0+IGNlcnRpZmljYXRlLmNlcnRpZmljYXRlQXJuLFxuICAgICAgICB9KS52YWx1ZTtcblxuICAgICAgICByZXR1cm4gYWNtLkNlcnRpZmljYXRlLmZyb21DZXJ0aWZpY2F0ZUFybih0aGlzLCBcIkdsb2JhbENlcnRpZmljYXRlXCIsIGNlcnRpZmljYXRlQXJuKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUdsb2JhbFdlYkFjbChhcHBOYW1lOiBzdHJpbmcsIGlwQWxsb3dMaXN0Pzogc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKGlwQWxsb3dMaXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpcFNldCA9IG5ldyB3YWZ2Mi5DZm5JUFNldCh0aGlzLmdsb2JhbFN0YWNrLCBcIklwU2V0XCIsIHtcbiAgICAgICAgICAgIG5hbWU6IGAke2FwcE5hbWV9LWlwLWFsbG93LWxpc3RgLFxuICAgICAgICAgICAgYWRkcmVzc2VzOiBbLi4uaXBBbGxvd0xpc3RdLFxuICAgICAgICAgICAgaXBBZGRyZXNzVmVyc2lvbjogXCJJUFY0XCIsXG4gICAgICAgICAgICBzY29wZTogXCJDTE9VREZST05UXCIsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGlwQWxsb3dMaXN0UnVsZTogd2FmdjIuQ2ZuV2ViQUNMLlJ1bGVQcm9wZXJ0eSA9IHtcbiAgICAgICAgICAgIG5hbWU6IGAke2FwcE5hbWV9LXdhZi1pcC1hbGxvdy1saXN0LXJ1bGVgLFxuICAgICAgICAgICAgdmlzaWJpbGl0eUNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGNsb3VkV2F0Y2hNZXRyaWNzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXRyaWNOYW1lOiBgJHthcHBOYW1lfS13YWYtaXAtYWxsb3ctbGlzdGAsXG4gICAgICAgICAgICAgICAgc2FtcGxlZFJlcXVlc3RzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgICAgIGFjdGlvbjogeyBhbGxvdzoge30gfSxcbiAgICAgICAgICAgIHN0YXRlbWVudDoge1xuICAgICAgICAgICAgICAgIGlwU2V0UmVmZXJlbmNlU3RhdGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIGFybjogaXBTZXQuYXR0ckFybixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB3ZWJBY2wgPSBuZXcgd2FmdjIuQ2ZuV2ViQUNMKHRoaXMuZ2xvYmFsU3RhY2ssIFwiV2ViQWNsXCIsIHtcbiAgICAgICAgICAgIG5hbWU6IGAke2FwcE5hbWV9LXdhZmAsXG4gICAgICAgICAgICBkZWZhdWx0QWN0aW9uOiB7IGJsb2NrOiB7fSB9LFxuICAgICAgICAgICAgdmlzaWJpbGl0eUNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGNsb3VkV2F0Y2hNZXRyaWNzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXRyaWNOYW1lOiBgJHthcHBOYW1lfS13YWZgLFxuICAgICAgICAgICAgICAgIHNhbXBsZWRSZXF1ZXN0c0VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NvcGU6IFNDT1BFX0NMT1VERlJPTlQsXG4gICAgICAgICAgICBydWxlczogW2lwQWxsb3dMaXN0UnVsZV0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgQ3Jvc3NSZWdpb25TdHJpbmdSZWYodGhpcywgXCJXZWJBY2xBcm5cIiwge1xuICAgICAgICAgICAgY29uc3RydWN0SW5PdGhlclJlZ2lvbjogd2ViQWNsLFxuICAgICAgICAgICAgdmFsdWU6ICh3ZWJBY2wpID0+IHdlYkFjbC5hdHRyQXJuLFxuICAgICAgICB9KS52YWx1ZTtcbiAgICB9XG59XG4iXX0=