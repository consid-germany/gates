"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSMParameterReader = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const CustomResource = require("aws-cdk-lib/custom-resources");
class SSMParameterReader extends CustomResource.AwsCustomResource {
    constructor(scope, id, props) {
        const onUpdate = {
            service: "SSM",
            action: "getParameter",
            parameters: {
                Name: props.parameterName,
            },
            region: props.region,
            physicalResourceId: CustomResource.PhysicalResourceId.of(Date.now().toString()),
        };
        const policy = CustomResource.AwsCustomResourcePolicy.fromSdkCalls({
            resources: [
                aws_cdk_lib_1.Arn.format({
                    service: "ssm",
                    region: props.region,
                    resource: "parameter",
                    resourceName: removeLeadingSlash(props.parameterName),
                }, aws_cdk_lib_1.Stack.of(scope)),
            ],
        });
        super(scope, id, { onUpdate, policy, resourceType: props.resourceType });
    }
    get value() {
        return this.getResponseField("Parameter.Value");
    }
}
exports.SSMParameterReader = SSMParameterReader;
function removeLeadingSlash(value) {
    return value.slice(0, 1) == "/" ? value.slice(1) : value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NtLXBhcmFtZXRlci1yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3NtLXBhcmFtZXRlci1yZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQXlDO0FBQ3pDLCtEQUErRDtBQVMvRCxNQUFhLGtCQUFtQixTQUFRLGNBQWMsQ0FBQyxpQkFBaUI7SUFDcEUsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE4QjtRQUNwRSxNQUFNLFFBQVEsR0FBOEI7WUFDeEMsT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUUsY0FBYztZQUN0QixVQUFVLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhO2FBQzVCO1lBQ0QsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLGtCQUFrQixFQUFFLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2xGLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDO1lBQy9ELFNBQVMsRUFBRTtnQkFDUCxpQkFBRyxDQUFDLE1BQU0sQ0FDTjtvQkFDSSxPQUFPLEVBQUUsS0FBSztvQkFDZCxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07b0JBQ3BCLFFBQVEsRUFBRSxXQUFXO29CQUNyQixZQUFZLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztpQkFDeEQsRUFDRCxtQkFBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FDbEI7YUFDSjtTQUNKLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBaENELGdEQWdDQztBQUVELFNBQVMsa0JBQWtCLENBQUMsS0FBYTtJQUNyQyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzdELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcm4sIFN0YWNrIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgKiBhcyBDdXN0b21SZXNvdXJjZSBmcm9tIFwiYXdzLWNkay1saWIvY3VzdG9tLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcblxuaW50ZXJmYWNlIFNTTVBhcmFtZXRlclJlYWRlclByb3BzIHtcbiAgICBwYXJhbWV0ZXJOYW1lOiBzdHJpbmc7XG4gICAgcmVnaW9uOiBzdHJpbmc7XG4gICAgcmVzb3VyY2VUeXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTU01QYXJhbWV0ZXJSZWFkZXIgZXh0ZW5kcyBDdXN0b21SZXNvdXJjZS5Bd3NDdXN0b21SZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNTTVBhcmFtZXRlclJlYWRlclByb3BzKSB7XG4gICAgICAgIGNvbnN0IG9uVXBkYXRlOiBDdXN0b21SZXNvdXJjZS5Bd3NTZGtDYWxsID0ge1xuICAgICAgICAgICAgc2VydmljZTogXCJTU01cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJnZXRQYXJhbWV0ZXJcIixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICBOYW1lOiBwcm9wcy5wYXJhbWV0ZXJOYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lvbjogcHJvcHMucmVnaW9uLFxuICAgICAgICAgICAgcGh5c2ljYWxSZXNvdXJjZUlkOiBDdXN0b21SZXNvdXJjZS5QaHlzaWNhbFJlc291cmNlSWQub2YoRGF0ZS5ub3coKS50b1N0cmluZygpKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwb2xpY3kgPSBDdXN0b21SZXNvdXJjZS5Bd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoe1xuICAgICAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAgQXJuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZTogXCJzc21cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcHJvcHMucmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IFwicGFyYW1ldGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6IHJlbW92ZUxlYWRpbmdTbGFzaChwcm9wcy5wYXJhbWV0ZXJOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgU3RhY2sub2Yoc2NvcGUpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcblxuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHsgb25VcGRhdGUsIHBvbGljeSwgcmVzb3VyY2VUeXBlOiBwcm9wcy5yZXNvdXJjZVR5cGUgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlc3BvbnNlRmllbGQoXCJQYXJhbWV0ZXIuVmFsdWVcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVMZWFkaW5nU2xhc2godmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbHVlLnNsaWNlKDAsIDEpID09IFwiL1wiID8gdmFsdWUuc2xpY2UoMSkgOiB2YWx1ZTtcbn1cbiJdfQ==