"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.CodeBuildStartBuildBatch=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var codebuild=()=>{var tmp=require("../../../aws-codebuild");return codebuild=()=>tmp,tmp},iam=()=>{var tmp=require("../../../aws-iam");return iam=()=>tmp,tmp},sfn=()=>{var tmp=require("../../../aws-stepfunctions");return sfn=()=>tmp,tmp},cdk=()=>{var tmp=require("../../../core");return cdk=()=>tmp,tmp},task_utils_1=()=>{var tmp=require("../private/task-utils");return task_utils_1=()=>tmp,tmp};class CodeBuildStartBuildBatch extends sfn().TaskStateBase{constructor(scope,id,props){super(scope,id,props),this.props=props;try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_CodeBuildStartBuildBatchProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CodeBuildStartBuildBatch),error}this.integrationPattern=props.integrationPattern??sfn().IntegrationPattern.REQUEST_RESPONSE,(0,task_utils_1().validatePatternSupported)(this.integrationPattern,CodeBuildStartBuildBatch.SUPPORTED_INTEGRATION_PATTERNS),this.taskMetrics={metricPrefixSingular:"CodeBuildProject",metricPrefixPlural:"CodeBuildProjects",metricDimensions:{ProjectArn:this.props.project.projectArn}},this.taskPolicies=this.configurePolicyStatements()}configurePolicyStatements(){let policyStatements;switch(this.integrationPattern){case sfn().IntegrationPattern.RUN_JOB:policyStatements=[new(iam()).PolicyStatement({resources:[this.props.project.projectArn],actions:["codebuild:StartBuildBatch","codebuild:StopBuildBatch","codebuild:BatchGetBuildBatches"]}),new(iam()).PolicyStatement({actions:["events:PutTargets","events:PutRule","events:DescribeRule"],resources:[cdk().Stack.of(this).formatArn({service:"events",resource:"rule/StepFunctionsGetEventForCodeBuildStartBuildBatchRule"})]})];break;case sfn().IntegrationPattern.REQUEST_RESPONSE:policyStatements=[new(iam()).PolicyStatement({resources:[this.props.project.projectArn],actions:["codebuild:StartBuildBatch"]})];break;default:throw new Error(`Unsupported integration pattern: ${this.integrationPattern}`)}return policyStatements}_renderTask(){return{Resource:(0,task_utils_1().integrationResourceArn)("codebuild","startBuildBatch",this.integrationPattern),Parameters:sfn().FieldUtils.renderObject({ProjectName:this.props.project.projectName,EnvironmentVariablesOverride:this.props.environmentVariablesOverride?this.serializeEnvVariables(this.props.environmentVariablesOverride):void 0})}}serializeEnvVariables(environmentVariables){return Object.keys(environmentVariables).map(name=>({Name:name,Type:environmentVariables[name].type||codebuild().BuildEnvironmentVariableType.PLAINTEXT,Value:environmentVariables[name].value}))}}exports.CodeBuildStartBuildBatch=CodeBuildStartBuildBatch,_a=JSII_RTTI_SYMBOL_1,CodeBuildStartBuildBatch[_a]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.CodeBuildStartBuildBatch",version:"2.136.1"},CodeBuildStartBuildBatch.SUPPORTED_INTEGRATION_PATTERNS=[sfn().IntegrationPattern.REQUEST_RESPONSE,sfn().IntegrationPattern.RUN_JOB];
