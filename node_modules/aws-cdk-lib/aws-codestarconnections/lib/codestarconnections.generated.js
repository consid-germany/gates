"use strict";var _a,_b,_c;Object.defineProperty(exports,"__esModule",{value:!0}),exports.CfnSyncConfiguration=exports.CfnRepositoryLink=exports.CfnConnection=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var cdk=()=>{var tmp=require("../../core");return cdk=()=>tmp,tmp},cfn_parse=()=>{var tmp=require("../../core/lib/helpers-internal");return cfn_parse=()=>tmp,tmp};class CfnConnection extends cdk().CfnResource{static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnConnectionPropsFromCloudFormation(resourceProperties);if(cdk().isResolvableObject(propsResult.value))throw new Error("Unexpected IResolvable");const ret=new CfnConnection(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}constructor(scope,id,props){super(scope,id,{type:CfnConnection.CFN_RESOURCE_TYPE_NAME,properties:props});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_codestarconnections_CfnConnectionProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CfnConnection),error}cdk().requireProperty(props,"connectionName",this),this.attrConnectionArn=cdk().Token.asString(this.getAtt("ConnectionArn",cdk().ResolutionTypeHint.STRING)),this.attrConnectionStatus=cdk().Token.asString(this.getAtt("ConnectionStatus",cdk().ResolutionTypeHint.STRING)),this.attrOwnerAccountId=cdk().Token.asString(this.getAtt("OwnerAccountId",cdk().ResolutionTypeHint.STRING)),this.connectionName=props.connectionName,this.hostArn=props.hostArn,this.providerType=props.providerType,this.tags=new(cdk()).TagManager(cdk().TagType.STANDARD,"AWS::CodeStarConnections::Connection",void 0,{tagPropertyName:"tags"}),this.tagsRaw=props.tags}get cfnProperties(){return{connectionName:this.connectionName,hostArn:this.hostArn,providerType:this.providerType,tags:this.tags.renderTags(this.tagsRaw)}}inspect(inspector){try{jsiiDeprecationWarnings().aws_cdk_lib_TreeInspector(inspector)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.inspect),error}inspector.addAttribute("aws:cdk:cloudformation:type",CfnConnection.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}renderProperties(props){return convertCfnConnectionPropsToCloudFormation(props)}}exports.CfnConnection=CfnConnection,_a=JSII_RTTI_SYMBOL_1,CfnConnection[_a]={fqn:"aws-cdk-lib.aws_codestarconnections.CfnConnection",version:"2.136.1"},CfnConnection.CFN_RESOURCE_TYPE_NAME="AWS::CodeStarConnections::Connection";function CfnConnectionPropsValidator(properties){if(!cdk().canInspect(properties))return cdk().VALIDATION_SUCCESS;const errors=new(cdk()).ValidationResults;return properties&&typeof properties=="object"&&!Array.isArray(properties)||errors.collect(new(cdk()).ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk().propertyValidator("connectionName",cdk().requiredValidator)(properties.connectionName)),errors.collect(cdk().propertyValidator("connectionName",cdk().validateString)(properties.connectionName)),errors.collect(cdk().propertyValidator("hostArn",cdk().validateString)(properties.hostArn)),errors.collect(cdk().propertyValidator("providerType",cdk().validateString)(properties.providerType)),errors.collect(cdk().propertyValidator("tags",cdk().listValidator(cdk().validateCfnTag))(properties.tags)),errors.wrap('supplied properties not correct for "CfnConnectionProps"')}function convertCfnConnectionPropsToCloudFormation(properties){return cdk().canInspect(properties)?(CfnConnectionPropsValidator(properties).assertSuccess(),{ConnectionName:cdk().stringToCloudFormation(properties.connectionName),HostArn:cdk().stringToCloudFormation(properties.hostArn),ProviderType:cdk().stringToCloudFormation(properties.providerType),Tags:cdk().listMapper(cdk().cfnTagToCloudFormation)(properties.tags)}):properties}function CfnConnectionPropsFromCloudFormation(properties){if(cdk().isResolvableObject(properties))return new(cfn_parse()).FromCloudFormationResult(properties);if(properties=properties??{},!(properties&&typeof properties=="object"&&!Array.isArray(properties)))return new(cfn_parse()).FromCloudFormationResult(properties);const ret=new(cfn_parse()).FromCloudFormationPropertyObject;return ret.addPropertyResult("connectionName","ConnectionName",properties.ConnectionName!=null?cfn_parse().FromCloudFormation.getString(properties.ConnectionName):void 0),ret.addPropertyResult("hostArn","HostArn",properties.HostArn!=null?cfn_parse().FromCloudFormation.getString(properties.HostArn):void 0),ret.addPropertyResult("providerType","ProviderType",properties.ProviderType!=null?cfn_parse().FromCloudFormation.getString(properties.ProviderType):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse().FromCloudFormation.getArray(cfn_parse().FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnRepositoryLink extends cdk().CfnResource{static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnRepositoryLinkPropsFromCloudFormation(resourceProperties);if(cdk().isResolvableObject(propsResult.value))throw new Error("Unexpected IResolvable");const ret=new CfnRepositoryLink(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}constructor(scope,id,props){super(scope,id,{type:CfnRepositoryLink.CFN_RESOURCE_TYPE_NAME,properties:props});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_codestarconnections_CfnRepositoryLinkProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CfnRepositoryLink),error}cdk().requireProperty(props,"connectionArn",this),cdk().requireProperty(props,"ownerId",this),cdk().requireProperty(props,"repositoryName",this),this.attrProviderType=cdk().Token.asString(this.getAtt("ProviderType",cdk().ResolutionTypeHint.STRING)),this.attrRepositoryLinkArn=cdk().Token.asString(this.getAtt("RepositoryLinkArn",cdk().ResolutionTypeHint.STRING)),this.attrRepositoryLinkId=cdk().Token.asString(this.getAtt("RepositoryLinkId",cdk().ResolutionTypeHint.STRING)),this.cdkTagManager=new(cdk()).TagManager(cdk().TagType.STANDARD,"AWS::CodeStarConnections::RepositoryLink",void 0,{tagPropertyName:"tags"}),this.connectionArn=props.connectionArn,this.encryptionKeyArn=props.encryptionKeyArn,this.ownerId=props.ownerId,this.repositoryName=props.repositoryName,this.tags=props.tags}get cfnProperties(){return{tags:this.cdkTagManager.renderTags(this.tags),connectionArn:this.connectionArn,encryptionKeyArn:this.encryptionKeyArn,ownerId:this.ownerId,repositoryName:this.repositoryName}}inspect(inspector){try{jsiiDeprecationWarnings().aws_cdk_lib_TreeInspector(inspector)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.inspect),error}inspector.addAttribute("aws:cdk:cloudformation:type",CfnRepositoryLink.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}renderProperties(props){return convertCfnRepositoryLinkPropsToCloudFormation(props)}}exports.CfnRepositoryLink=CfnRepositoryLink,_b=JSII_RTTI_SYMBOL_1,CfnRepositoryLink[_b]={fqn:"aws-cdk-lib.aws_codestarconnections.CfnRepositoryLink",version:"2.136.1"},CfnRepositoryLink.CFN_RESOURCE_TYPE_NAME="AWS::CodeStarConnections::RepositoryLink";function CfnRepositoryLinkPropsValidator(properties){if(!cdk().canInspect(properties))return cdk().VALIDATION_SUCCESS;const errors=new(cdk()).ValidationResults;return properties&&typeof properties=="object"&&!Array.isArray(properties)||errors.collect(new(cdk()).ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk().propertyValidator("connectionArn",cdk().requiredValidator)(properties.connectionArn)),errors.collect(cdk().propertyValidator("connectionArn",cdk().validateString)(properties.connectionArn)),errors.collect(cdk().propertyValidator("encryptionKeyArn",cdk().validateString)(properties.encryptionKeyArn)),errors.collect(cdk().propertyValidator("ownerId",cdk().requiredValidator)(properties.ownerId)),errors.collect(cdk().propertyValidator("ownerId",cdk().validateString)(properties.ownerId)),errors.collect(cdk().propertyValidator("repositoryName",cdk().requiredValidator)(properties.repositoryName)),errors.collect(cdk().propertyValidator("repositoryName",cdk().validateString)(properties.repositoryName)),errors.collect(cdk().propertyValidator("tags",cdk().listValidator(cdk().validateCfnTag))(properties.tags)),errors.wrap('supplied properties not correct for "CfnRepositoryLinkProps"')}function convertCfnRepositoryLinkPropsToCloudFormation(properties){return cdk().canInspect(properties)?(CfnRepositoryLinkPropsValidator(properties).assertSuccess(),{ConnectionArn:cdk().stringToCloudFormation(properties.connectionArn),EncryptionKeyArn:cdk().stringToCloudFormation(properties.encryptionKeyArn),OwnerId:cdk().stringToCloudFormation(properties.ownerId),RepositoryName:cdk().stringToCloudFormation(properties.repositoryName),Tags:cdk().listMapper(cdk().cfnTagToCloudFormation)(properties.tags)}):properties}function CfnRepositoryLinkPropsFromCloudFormation(properties){if(cdk().isResolvableObject(properties))return new(cfn_parse()).FromCloudFormationResult(properties);if(properties=properties??{},!(properties&&typeof properties=="object"&&!Array.isArray(properties)))return new(cfn_parse()).FromCloudFormationResult(properties);const ret=new(cfn_parse()).FromCloudFormationPropertyObject;return ret.addPropertyResult("connectionArn","ConnectionArn",properties.ConnectionArn!=null?cfn_parse().FromCloudFormation.getString(properties.ConnectionArn):void 0),ret.addPropertyResult("encryptionKeyArn","EncryptionKeyArn",properties.EncryptionKeyArn!=null?cfn_parse().FromCloudFormation.getString(properties.EncryptionKeyArn):void 0),ret.addPropertyResult("ownerId","OwnerId",properties.OwnerId!=null?cfn_parse().FromCloudFormation.getString(properties.OwnerId):void 0),ret.addPropertyResult("repositoryName","RepositoryName",properties.RepositoryName!=null?cfn_parse().FromCloudFormation.getString(properties.RepositoryName):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse().FromCloudFormation.getArray(cfn_parse().FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnSyncConfiguration extends cdk().CfnResource{static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnSyncConfigurationPropsFromCloudFormation(resourceProperties);if(cdk().isResolvableObject(propsResult.value))throw new Error("Unexpected IResolvable");const ret=new CfnSyncConfiguration(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}constructor(scope,id,props){super(scope,id,{type:CfnSyncConfiguration.CFN_RESOURCE_TYPE_NAME,properties:props});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_codestarconnections_CfnSyncConfigurationProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CfnSyncConfiguration),error}cdk().requireProperty(props,"branch",this),cdk().requireProperty(props,"configFile",this),cdk().requireProperty(props,"repositoryLinkId",this),cdk().requireProperty(props,"resourceName",this),cdk().requireProperty(props,"roleArn",this),cdk().requireProperty(props,"syncType",this),this.attrOwnerId=cdk().Token.asString(this.getAtt("OwnerId",cdk().ResolutionTypeHint.STRING)),this.attrProviderType=cdk().Token.asString(this.getAtt("ProviderType",cdk().ResolutionTypeHint.STRING)),this.attrRepositoryName=cdk().Token.asString(this.getAtt("RepositoryName",cdk().ResolutionTypeHint.STRING)),this.branch=props.branch,this.configFile=props.configFile,this.publishDeploymentStatus=props.publishDeploymentStatus,this.repositoryLinkId=props.repositoryLinkId,this.resourceName=props.resourceName,this.roleArn=props.roleArn,this.syncType=props.syncType,this.triggerResourceUpdateOn=props.triggerResourceUpdateOn}get cfnProperties(){return{branch:this.branch,configFile:this.configFile,publishDeploymentStatus:this.publishDeploymentStatus,repositoryLinkId:this.repositoryLinkId,resourceName:this.resourceName,roleArn:this.roleArn,syncType:this.syncType,triggerResourceUpdateOn:this.triggerResourceUpdateOn}}inspect(inspector){try{jsiiDeprecationWarnings().aws_cdk_lib_TreeInspector(inspector)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.inspect),error}inspector.addAttribute("aws:cdk:cloudformation:type",CfnSyncConfiguration.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}renderProperties(props){return convertCfnSyncConfigurationPropsToCloudFormation(props)}}exports.CfnSyncConfiguration=CfnSyncConfiguration,_c=JSII_RTTI_SYMBOL_1,CfnSyncConfiguration[_c]={fqn:"aws-cdk-lib.aws_codestarconnections.CfnSyncConfiguration",version:"2.136.1"},CfnSyncConfiguration.CFN_RESOURCE_TYPE_NAME="AWS::CodeStarConnections::SyncConfiguration";function CfnSyncConfigurationPropsValidator(properties){if(!cdk().canInspect(properties))return cdk().VALIDATION_SUCCESS;const errors=new(cdk()).ValidationResults;return properties&&typeof properties=="object"&&!Array.isArray(properties)||errors.collect(new(cdk()).ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk().propertyValidator("branch",cdk().requiredValidator)(properties.branch)),errors.collect(cdk().propertyValidator("branch",cdk().validateString)(properties.branch)),errors.collect(cdk().propertyValidator("configFile",cdk().requiredValidator)(properties.configFile)),errors.collect(cdk().propertyValidator("configFile",cdk().validateString)(properties.configFile)),errors.collect(cdk().propertyValidator("publishDeploymentStatus",cdk().validateString)(properties.publishDeploymentStatus)),errors.collect(cdk().propertyValidator("repositoryLinkId",cdk().requiredValidator)(properties.repositoryLinkId)),errors.collect(cdk().propertyValidator("repositoryLinkId",cdk().validateString)(properties.repositoryLinkId)),errors.collect(cdk().propertyValidator("resourceName",cdk().requiredValidator)(properties.resourceName)),errors.collect(cdk().propertyValidator("resourceName",cdk().validateString)(properties.resourceName)),errors.collect(cdk().propertyValidator("roleArn",cdk().requiredValidator)(properties.roleArn)),errors.collect(cdk().propertyValidator("roleArn",cdk().validateString)(properties.roleArn)),errors.collect(cdk().propertyValidator("syncType",cdk().requiredValidator)(properties.syncType)),errors.collect(cdk().propertyValidator("syncType",cdk().validateString)(properties.syncType)),errors.collect(cdk().propertyValidator("triggerResourceUpdateOn",cdk().validateString)(properties.triggerResourceUpdateOn)),errors.wrap('supplied properties not correct for "CfnSyncConfigurationProps"')}function convertCfnSyncConfigurationPropsToCloudFormation(properties){return cdk().canInspect(properties)?(CfnSyncConfigurationPropsValidator(properties).assertSuccess(),{Branch:cdk().stringToCloudFormation(properties.branch),ConfigFile:cdk().stringToCloudFormation(properties.configFile),PublishDeploymentStatus:cdk().stringToCloudFormation(properties.publishDeploymentStatus),RepositoryLinkId:cdk().stringToCloudFormation(properties.repositoryLinkId),ResourceName:cdk().stringToCloudFormation(properties.resourceName),RoleArn:cdk().stringToCloudFormation(properties.roleArn),SyncType:cdk().stringToCloudFormation(properties.syncType),TriggerResourceUpdateOn:cdk().stringToCloudFormation(properties.triggerResourceUpdateOn)}):properties}function CfnSyncConfigurationPropsFromCloudFormation(properties){if(cdk().isResolvableObject(properties))return new(cfn_parse()).FromCloudFormationResult(properties);if(properties=properties??{},!(properties&&typeof properties=="object"&&!Array.isArray(properties)))return new(cfn_parse()).FromCloudFormationResult(properties);const ret=new(cfn_parse()).FromCloudFormationPropertyObject;return ret.addPropertyResult("branch","Branch",properties.Branch!=null?cfn_parse().FromCloudFormation.getString(properties.Branch):void 0),ret.addPropertyResult("configFile","ConfigFile",properties.ConfigFile!=null?cfn_parse().FromCloudFormation.getString(properties.ConfigFile):void 0),ret.addPropertyResult("publishDeploymentStatus","PublishDeploymentStatus",properties.PublishDeploymentStatus!=null?cfn_parse().FromCloudFormation.getString(properties.PublishDeploymentStatus):void 0),ret.addPropertyResult("repositoryLinkId","RepositoryLinkId",properties.RepositoryLinkId!=null?cfn_parse().FromCloudFormation.getString(properties.RepositoryLinkId):void 0),ret.addPropertyResult("resourceName","ResourceName",properties.ResourceName!=null?cfn_parse().FromCloudFormation.getString(properties.ResourceName):void 0),ret.addPropertyResult("roleArn","RoleArn",properties.RoleArn!=null?cfn_parse().FromCloudFormation.getString(properties.RoleArn):void 0),ret.addPropertyResult("syncType","SyncType",properties.SyncType!=null?cfn_parse().FromCloudFormation.getString(properties.SyncType):void 0),ret.addPropertyResult("triggerResourceUpdateOn","TriggerResourceUpdateOn",properties.TriggerResourceUpdateOn!=null?cfn_parse().FromCloudFormation.getString(properties.TriggerResourceUpdateOn):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}
