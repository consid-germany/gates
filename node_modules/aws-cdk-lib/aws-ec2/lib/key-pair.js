"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.KeyPair=exports.KeyPairType=exports.KeyPairFormat=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var ec2_generated_1=()=>{var tmp=require("./ec2.generated");return ec2_generated_1=()=>tmp,tmp},machine_image_1=()=>{var tmp=require("./machine-image");return machine_image_1=()=>tmp,tmp},aws_ssm_1=()=>{var tmp=require("../../aws-ssm");return aws_ssm_1=()=>tmp,tmp},core_1=()=>{var tmp=require("../../core");return core_1=()=>tmp,tmp},KeyPairFormat;(function(KeyPairFormat2){KeyPairFormat2.PPK="ppk",KeyPairFormat2.PEM="pem"})(KeyPairFormat||(exports.KeyPairFormat=KeyPairFormat={}));var KeyPairType;(function(KeyPairType2){KeyPairType2.RSA="rsa",KeyPairType2.ED25519="ed25519"})(KeyPairType||(exports.KeyPairType=KeyPairType={}));class KeyPair extends core_1().Resource{static fromKeyPairName(scope,id,keyPairName){return KeyPair.fromKeyPairAttributes(scope,id,{keyPairName})}static fromKeyPairAttributes(scope,id,attrs){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_ec2_KeyPairAttributes(attrs)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromKeyPairAttributes),error}class Import extends core_1().Resource{constructor(){super(scope,id),this.keyPairName=attrs.keyPairName,this.type=attrs.type}_isOsCompatible(osType){switch(this.type){case KeyPairType.ED25519:return osType!==machine_image_1().OperatingSystemType.WINDOWS;case KeyPairType.RSA:return!0;default:return!0}}}return new Import}constructor(scope,id,props){super(scope,id,{...props,physicalName:props?.keyPairName??core_1().Lazy.string({produce:()=>core_1().Names.uniqueResourceName(this,{maxLength:255})})});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_ec2_KeyPairProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,KeyPair),error}if(props?.publicKeyMaterial&&props?.type)throw new Error("Cannot specify 'type' for keys with imported material");this._isImport=!!props?.publicKeyMaterial;const keyType=props?.type??KeyPairType.RSA,keyFormat=props?.format??KeyPairFormat.PEM,cfnResource=new(ec2_generated_1()).CfnKeyPair(this,"Resource",{keyName:this.physicalName,keyType:props?.type??KeyPairType.RSA,keyFormat:props?.format??KeyPairFormat.PEM,publicKeyMaterial:props?.publicKeyMaterial});this.keyPairName=cfnResource.ref,this.keyPairFingerprint=cfnResource.attrKeyFingerprint,this.keyPairId=cfnResource.attrKeyPairId,this.type=keyType,this.format=keyFormat}get hasImportedMaterial(){return this._isImport}get privateKey(){if(this._isImport)throw new Error("An SSM parameter with private key material is not created for imported keys");return this._privateKeySsm||(this._privateKeySsm=aws_ssm_1().StringParameter.fromSecureStringParameterAttributes(this,"PrivateKeyParameter",{parameterName:`/ec2/keypair/${this.keyPairId}`,simpleName:!1})),this._privateKeySsm}_isOsCompatible(osType){switch(this.type){case KeyPairType.ED25519:return osType!==machine_image_1().OperatingSystemType.WINDOWS;case KeyPairType.RSA:return!0;default:return!0}}}exports.KeyPair=KeyPair,_a=JSII_RTTI_SYMBOL_1,KeyPair[_a]={fqn:"aws-cdk-lib.aws_ec2.KeyPair",version:"2.136.1"};
