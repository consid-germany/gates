/*
 * Gates API
 *
 * OpenAPI specification for the Gates API
 *
 * The version of the OpenAPI document: 1.12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Gate : The gate is lowest but most important part of the hierachy. This defines the actual object, that will be altered by all actions. You can open and close it.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Gate {
    /// The group that surrounds the service.
    #[serde(rename = "group")]
    pub group: String,
    /// The service that contains the environment.
    #[serde(rename = "service")]
    pub service: String,
    /// The environment for the specific gate.
    #[serde(rename = "environment")]
    pub environment: String,
    #[serde(rename = "state")]
    pub state: models::GateState,
    /// The way to describe how you want to arrange your gates.
    #[serde(rename = "display_order", skip_serializing_if = "Option::is_none")]
    pub display_order: Option<f64>,
    /// The comment describe why you open or closed the gate.
    #[serde(rename = "comments")]
    pub comments: Vec<models::Comment>,
    /// Changes when a comment or gate is changed.
    #[serde(rename = "last_updated")]
    pub last_updated: String,
}

impl Gate {
    /// The gate is lowest but most important part of the hierachy. This defines the actual object, that will be altered by all actions. You can open and close it.
    pub fn new(group: String, service: String, environment: String, state: models::GateState, comments: Vec<models::Comment>, last_updated: String) -> Gate {
        Gate {
            group,
            service,
            environment,
            state,
            display_order: None,
            comments,
            last_updated,
        }
    }
}

